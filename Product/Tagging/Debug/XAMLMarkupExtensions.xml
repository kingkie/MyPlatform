<?xml version="1.0"?>
<doc>
    <assembly>
        <name>XAMLMarkupExtensions</name>
    </assembly>
    <members>
        <member name="T:XAMLMarkupExtensions.Base.BindingValueProvider">
            <summary>
            Special class which use as value provider for bindings.
            Some properties are sealing (Setter.Value and Binding.Source) and cannot change, so
            if we use such provider, it stay same but it's value free to change.
            </summary>
        </member>
        <member name="F:XAMLMarkupExtensions.Base.BindingValueProvider.ValueProperty">
            <summary>
            Property info of <see cref="P:XAMLMarkupExtensions.Base.BindingValueProvider.Value" /> property.
            </summary>
        </member>
        <member name="P:XAMLMarkupExtensions.Base.BindingValueProvider.Value">
            <summary>
            Providing value.
            </summary>
        </member>
        <member name="E:XAMLMarkupExtensions.Base.BindingValueProvider.PropertyChanged">
            <inheritdoc />
        </member>
        <member name="M:XAMLMarkupExtensions.Base.BindingValueProvider.OnPropertyChanged(System.String)">
            <summary>
            Raise <see cref="E:XAMLMarkupExtensions.Base.BindingValueProvider.PropertyChanged" /> event.
            </summary>
        </member>
        <member name="T:XAMLMarkupExtensions.Base.DependencyObjectHelper">
            <summary>
            Extension methods for dependency objects.
            </summary>
        </member>
        <member name="M:XAMLMarkupExtensions.Base.DependencyObjectHelper.GetValueSync``1(System.Windows.DependencyObject,System.Windows.DependencyProperty)">
            <summary>
            Gets the value thread-safe.
            </summary>
            <param name="obj">The object.</param>
            <param name="property">The property.</param>
            <typeparam name="T">The type of the value.</typeparam>
            <returns>The value.</returns>
        </member>
        <member name="M:XAMLMarkupExtensions.Base.DependencyObjectHelper.SetValueSync``1(System.Windows.DependencyObject,System.Windows.DependencyProperty,``0)">
            <summary>
            Sets the value thread-safe.
            </summary>
            <param name="obj">The object.</param>
            <param name="property">The property.</param>
            <param name="value">The value.</param>
            <typeparam name="T">The type of the value.</typeparam>
        </member>
        <member name="T:XAMLMarkupExtensions.Base.EndpointReachedEventArgs">
            <summary>
            The event arguments of the EndpointReached event.
            </summary>
        </member>
        <member name="P:XAMLMarkupExtensions.Base.EndpointReachedEventArgs.Endpoint">
            <summary>
            The endpoint.
            </summary>
        </member>
        <member name="P:XAMLMarkupExtensions.Base.EndpointReachedEventArgs.EndpointValue">
            <summary>
            Get or set the value that will be stored to the endpoint.
            </summary>
        </member>
        <member name="P:XAMLMarkupExtensions.Base.EndpointReachedEventArgs.Handled">
            <summary>
            Get or set a flag indicating that the event was handled.
            </summary>
        </member>
        <member name="M:XAMLMarkupExtensions.Base.EndpointReachedEventArgs.#ctor(XAMLMarkupExtensions.Base.TargetInfo)">
            <summary>
            Creates a new <see cref="T:XAMLMarkupExtensions.Base.EndpointReachedEventArgs"/> object.
            </summary>
            <param name="endPoint">The endpoint.</param>
        </member>
        <member name="T:XAMLMarkupExtensions.Base.INestedMarkupExtension">
            <summary>
            Markup extensions that implement this interface shall be able to return their target objects.
            They should also implement a SetNewValue function that properly set the value to all their targets with their own modification of the value.
            </summary>
        </member>
        <member name="M:XAMLMarkupExtensions.Base.INestedMarkupExtension.GetTargetPropertyPaths">
            <summary>
            Get the paths to all target properties through the nesting hierarchy.
            </summary>
            <returns>A list of combinations of property types and the corresponsing stacks that resemble the paths to the properties.</returns>
        </member>
        <member name="M:XAMLMarkupExtensions.Base.INestedMarkupExtension.UpdateNewValue(XAMLMarkupExtensions.Base.TargetPath)">
            <summary>
            Trigger the update of the target(s).
            </summary>
            <param name="targetPath">A specific path to follow or null for all targets.</param>
            <returns>The output of the path at the endpoint.</returns>
        </member>
        <member name="M:XAMLMarkupExtensions.Base.INestedMarkupExtension.FormatOutput(XAMLMarkupExtensions.Base.TargetInfo,XAMLMarkupExtensions.Base.TargetInfo)">
            <summary>
            Format the output of the markup extension.
            </summary>
            <param name="endpoint">Information about the endpoint.</param>
            <param name="info">Information about the target.</param>
            <returns>The output of this extension for the given endpoint and target.</returns>
        </member>
        <member name="M:XAMLMarkupExtensions.Base.INestedMarkupExtension.IsConnected(XAMLMarkupExtensions.Base.TargetInfo)">
            <summary>
            Check, if the given target is connected to this markup extension.
            </summary>
            <param name="info">Information about the target.</param>
            <returns>True, if a connection exits.</returns>
        </member>
        <member name="T:XAMLMarkupExtensions.Base.IObjectDependency">
            <summary>
            Interface for object which store at <see cref="T:XAMLMarkupExtensions.Base.ObjectDependencyManager" />.
            </summary>
        </member>
        <member name="M:XAMLMarkupExtensions.Base.IObjectDependency.OnDependenciesRemoved(System.Collections.Generic.IEnumerable{System.WeakReference})">
            <summary>
            Notify that some of dependencies are dead.
            </summary>
        </member>
        <member name="M:XAMLMarkupExtensions.Base.IObjectDependency.OnAllDependenciesRemoved">
            <summary>
            Notify that all dependencies are dead.
            </summary>
        </member>
        <member name="T:XAMLMarkupExtensions.Base.NestedMarkupExtension">
            <summary>
            This class walks up the tree of markup extensions to support nesting.
            Based on <see href="https://github.com/SeriousM/WPFLocalizationExtension"/>
            </summary>
        </member>
        <member name="F:XAMLMarkupExtensions.Base.NestedMarkupExtension.targetObjects">
            <summary>
            Holds the collection of assigned dependency objects
            Instead of a single reference, a list is used, if this extension is applied to multiple instances.
            </summary>
        </member>
        <member name="F:XAMLMarkupExtensions.Base.NestedMarkupExtension.rootObjectHashCode">
            <summary>
            Holds the markup extensions root object hash code.
            </summary>
        </member>
        <member name="M:XAMLMarkupExtensions.Base.NestedMarkupExtension.GetTargetObjectsAndProperties">
            <summary>
            Get the target objects and properties.
            </summary>
            <returns>A list of target objects.</returns>
        </member>
        <member name="M:XAMLMarkupExtensions.Base.NestedMarkupExtension.GetTargetPropertyPaths">
            <summary>
            Get the paths to all target properties through the nesting hierarchy.
            </summary>
            <returns>A list of paths to the properties.</returns>
        </member>
        <member name="F:XAMLMarkupExtensions.Base.NestedMarkupExtension.OnFirstTarget">
            <summary>
            An action that is called when the first target is bound.
            </summary>
        </member>
        <member name="M:XAMLMarkupExtensions.Base.NestedMarkupExtension.OnFirstTargetAdded">
            <summary>
            An action that is called when the first target is bound.
            </summary>
        </member>
        <member name="M:XAMLMarkupExtensions.Base.NestedMarkupExtension.OnLastTargetRemoved">
            <summary>
            An action that is called when the last target is unbound.
            </summary>
            <remarks>
            This method can be called without <see cref="M:XAMLMarkupExtensions.Base.NestedMarkupExtension.OnFirstTargetAdded" /> before
            if extension disposed without adding targets.
            </remarks>
        </member>
        <member name="M:XAMLMarkupExtensions.Base.NestedMarkupExtension.FormatOutput(XAMLMarkupExtensions.Base.TargetInfo,XAMLMarkupExtensions.Base.TargetInfo)">
            <summary>
            This function must be implemented by all child classes.
            It shall return the properly prepared output of the markup extension.
            </summary>
            <param name="info">Information about the target.</param>
            <param name="endPoint">Information about the endpoint.</param>
        </member>
        <member name="M:XAMLMarkupExtensions.Base.NestedMarkupExtension.IsConnected(XAMLMarkupExtensions.Base.TargetInfo)">
            <summary>
            Check, if the given target is connected to this markup extension.
            </summary>
            <param name="info">Information about the target.</param>
            <returns>True, if a connection exits.</returns>
        </member>
        <member name="M:XAMLMarkupExtensions.Base.NestedMarkupExtension.OnServiceProviderChanged(System.IServiceProvider)">
            <summary>
            Override this function, if (and only if) additional information is needed from the <see cref="T:System.IServiceProvider"/> instance that is passed to <see cref="M:XAMLMarkupExtensions.Base.NestedMarkupExtension.ProvideValue(System.IServiceProvider)"/>.
            </summary>
            <param name="serviceProvider">A service provider.</param>
        </member>
        <member name="M:XAMLMarkupExtensions.Base.NestedMarkupExtension.ProvideValue(System.IServiceProvider)">
            <summary>
            The ProvideValue method of the <see cref="T:System.Windows.Markup.MarkupExtension"/> base class.
            </summary>
            <param name="serviceProvider">A service provider.</param>
            <returns>The value of the extension, or this if something gone wrong (needed for Templates).</returns>
        </member>
        <member name="M:XAMLMarkupExtensions.Base.NestedMarkupExtension.UpdateNewValue">
            <summary>
            Set the new value for all targets.
            </summary>
        </member>
        <member name="M:XAMLMarkupExtensions.Base.NestedMarkupExtension.UpdateNewValue(XAMLMarkupExtensions.Base.TargetPath)">
            <summary>
            Trigger the update of the target(s).
            </summary>
            <param name="targetPath">A specific path to follow or null for all targets.</param>
            <returns>The output of the path at the endpoint.</returns>
        </member>
        <member name="M:XAMLMarkupExtensions.Base.NestedMarkupExtension.SetPropertyValue(System.Object,XAMLMarkupExtensions.Base.TargetInfo,System.Boolean)">
            <summary>
            Sets the value of a property of type PropertyInfo or DependencyProperty.
            </summary>
            <param name="value">The new value.</param>
            <param name="info">The target information.</param>
            <param name="forceNull">Determines, whether null values should be written.</param>
        </member>
        <member name="M:XAMLMarkupExtensions.Base.NestedMarkupExtension.GetPropertyValue(XAMLMarkupExtensions.Base.TargetInfo)">
            <summary>
            Gets the value of a property of type PropertyInfo or DependencyProperty.
            </summary>
            <param name="info">The target information.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:XAMLMarkupExtensions.Base.NestedMarkupExtension.GetValue``1(System.Object,System.Reflection.PropertyInfo,System.Int32,XAMLMarkupExtensions.Base.TargetInfo,System.IServiceProvider)">
            <summary>
            Safely get the value of a property that might be set by a further MarkupExtension.
            </summary>
            <typeparam name="T">The return type.</typeparam>
            <param name="value">The value supplied by the set accessor of the property.</param>
            <param name="property">The property information.</param>
            <param name="index">The index of the indexed property, if applicable.</param>
            <param name="endPoint">An optional endpoint information.</param>
            <param name="service">An optional serviceProvider information.</param>
            <returns>The value or default.</returns>
        </member>
        <member name="M:XAMLMarkupExtensions.Base.NestedMarkupExtension.UpdateOnEndpoint(XAMLMarkupExtensions.Base.TargetInfo)">
            <summary>
            This method must return true, if an update shall be executed when the given endpoint is reached.
            This method is called each time an endpoint is reached.
            </summary>
            <param name="endpoint">Information on the specific endpoint.</param>
            <returns>True, if an update of the path to this endpoint shall be performed.</returns>
        </member>
        <member name="M:XAMLMarkupExtensions.Base.NestedMarkupExtension.GetPathToEndpoint(XAMLMarkupExtensions.Base.TargetInfo)">
            <summary>
            Get the path to a specific endpoint.
            </summary>
            <param name="endpoint">The endpoint info.</param>
            <returns>The path to the endpoint.</returns>
        </member>
        <member name="M:XAMLMarkupExtensions.Base.NestedMarkupExtension.IsEndpointObject(System.Object)">
            <summary>
            Checks the existance of the given object in the target endpoint list.
            </summary>
            <param name="obj">The object.</param>
            <returns>True, if the extension nesting tree reaches the given object.</returns>
        </member>
        <member name="M:XAMLMarkupExtensions.Base.NestedMarkupExtension.OnEndpointReached(XAMLMarkupExtensions.Base.NestedMarkupExtension,XAMLMarkupExtensions.Base.EndpointReachedEventArgs)">
            <summary>
            An event handler that is called from the static <see cref="T:XAMLMarkupExtensions.Base.NestedMarkupExtension.EndpointReachedEvent"/> class.
            </summary>
            <param name="sender">The markup extension that reached an enpoint.</param>
            <param name="args">The event args containing the endpoint information.</param>
        </member>
        <member name="M:XAMLMarkupExtensions.Base.NestedMarkupExtension.Dispose">
            <summary>
            Implements the IDisposable.Dispose function.
            </summary>
        </member>
        <member name="M:XAMLMarkupExtensions.Base.NestedMarkupExtension.Dispose(System.Boolean)">
            <summary>
            Dispose resources.
            </summary>
            <param name="isDisposing">
            <see langword="true" /> if calls from Dispose() method.
            <see langword="false" /> if calls from finalizer.
            </param>
        </member>
        <member name="M:XAMLMarkupExtensions.Base.NestedMarkupExtension.XAMLMarkupExtensions#Base#IObjectDependency#OnDependenciesRemoved(System.Collections.Generic.IEnumerable{System.WeakReference})">
            <inheritdoc />
        </member>
        <member name="M:XAMLMarkupExtensions.Base.NestedMarkupExtension.XAMLMarkupExtensions#Base#IObjectDependency#OnAllDependenciesRemoved">
            <inheritdoc />
        </member>
        <member name="T:XAMLMarkupExtensions.Base.NestedMarkupExtension.EndpointReachedEvent">
            <summary>
            A static proxy class that handles endpoint reached events for a list of weak references of <see cref="T:XAMLMarkupExtensions.Base.NestedMarkupExtension"/>.
            This circumvents the usage of a WeakEventManager while providing a static instance that is capable of firing the event.
            </summary>
        </member>
        <member name="F:XAMLMarkupExtensions.Base.NestedMarkupExtension.EndpointReachedEvent.listeners">
            <summary>
            A dicitonary which contains a list of listeners per unique rootObject hash.
            </summary>
        </member>
        <member name="M:XAMLMarkupExtensions.Base.NestedMarkupExtension.EndpointReachedEvent.Invoke(System.Int32,XAMLMarkupExtensions.Base.NestedMarkupExtension,XAMLMarkupExtensions.Base.EndpointReachedEventArgs)">
            <summary>
            Fire the event.
            </summary>
            <param name="rootObjectHashCode"><paramref name="sender"/>s root object hash code.</param>
            <param name="sender">The markup extension that reached an end point.</param>
            <param name="args">The event args containing the endpoint information.</param>
        </member>
        <member name="M:XAMLMarkupExtensions.Base.NestedMarkupExtension.EndpointReachedEvent.AddListener(System.Int32,XAMLMarkupExtensions.Base.NestedMarkupExtension)">
            <summary>
            Adds a listener to the inner list of listeners.
            </summary>
            <param name="rootObjectHashCode"><paramref name="listener"/>s root object hash code.</param>
            <param name="listener">The listener to add.</param>
        </member>
        <member name="M:XAMLMarkupExtensions.Base.NestedMarkupExtension.EndpointReachedEvent.ClearListenersForRootObject(System.Int32)">
            <summary>
            Clears the listeners list for the given root object hash code <paramref name="rootObjectHashCode"/>.
            </summary>
        </member>
        <member name="M:XAMLMarkupExtensions.Base.NestedMarkupExtension.EndpointReachedEvent.ContainsRootObjectHash(System.Int32)">
            <summary>
            Returns true if the given <paramref name="rootObjectHashCode"/> is already added, false otherwise.
            </summary>
            <param name="rootObjectHashCode">Root object hash code to check.</param>
            <returns>Returns true if the given <paramref name="rootObjectHashCode"/> is already added, false otherwise.</returns>
        </member>
        <member name="M:XAMLMarkupExtensions.Base.NestedMarkupExtension.EndpointReachedEvent.RemoveListener(System.Int32,XAMLMarkupExtensions.Base.NestedMarkupExtension)">
            <summary>
            Removes a listener from the inner list of listeners.
            </summary>
            <param name="rootObjectHashCode"><paramref name="listener"/>s root object hash code.</param>
            <param name="listener">The listener to remove.</param>
        </member>
        <member name="M:XAMLMarkupExtensions.Base.NestedMarkupExtension.EndpointReachedEvent.#cctor">
            <summary>
            An empty static constructor to prevent the class from being marked as beforefieldinit.
            </summary>
        </member>
        <member name="T:XAMLMarkupExtensions.Base.NullExtension">
            <summary>
            An extension that returns null.
            </summary>
        </member>
        <member name="M:XAMLMarkupExtensions.Base.NullExtension.FormatOutput(XAMLMarkupExtensions.Base.TargetInfo,XAMLMarkupExtensions.Base.TargetInfo)">
            <summary>
            This function returns the properly prepared output of the markup extension.
            </summary>
            <param name="info">Information about the target.</param>
            <param name="endPoint">Information about the endpoint.</param>
        </member>
        <member name="M:XAMLMarkupExtensions.Base.NullExtension.UpdateOnEndpoint(XAMLMarkupExtensions.Base.TargetInfo)">
            <inheritdoc/>
        </member>
        <member name="T:XAMLMarkupExtensions.Base.ObjectDependencyManager">
            <summary>
            This class ensures, that a specific object lives as long a associated object is alive.
            Based on: <see href="https://github.com/SeriousM/WPFLocalizationExtension"/>
            </summary>
        </member>
        <member name="F:XAMLMarkupExtensions.Base.ObjectDependencyManager.internalList">
            <summary>
            This member holds the list of all <see cref="T:System.WeakReference"/>s and their appropriate objects.
            </summary>
        </member>
        <member name="M:XAMLMarkupExtensions.Base.ObjectDependencyManager.#cctor">
            <summary>
            Initializes static members of the <see cref="T:XAMLMarkupExtensions.Base.ObjectDependencyManager"/> class.
            Static Constructor. Creates a new instance of
            Dictionary(object, <see cref="T:System.WeakReference"/>) and set it to the <see cref="F:XAMLMarkupExtensions.Base.ObjectDependencyManager.internalList"/>.
            </summary>
        </member>
        <member name="M:XAMLMarkupExtensions.Base.ObjectDependencyManager.AddObjectDependency(System.WeakReference,System.Object)">
            <summary>
            This method adds a new object dependency
            </summary>
            <param name="weakRefDp">The <see cref="T:System.WeakReference"/>, which ensures the live cycle of <paramref name="objToHold"/></param>
            <param name="objToHold">The object, which should stay alive as long <paramref name="weakRefDp"/> is alive</param>
            <returns>
            true, if the binding was successfully, otherwise false
            </returns>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="objToHold"/> cannot be null
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The <paramref name="weakRefDp"/> cannot be null
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="objToHold"/> cannot be type of <see cref="T:System.WeakReference"/>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The <see cref="T:System.WeakReference"/>.Target cannot be the same as <paramref name="objToHold"/>
            </exception>
        </member>
        <member name="M:XAMLMarkupExtensions.Base.ObjectDependencyManager.CleanUp">
            <summary>
            This method cleans up all independent (!<see cref="T:System.WeakReference"/>.IsAlive) objects.
            </summary>
        </member>
        <member name="M:XAMLMarkupExtensions.Base.ObjectDependencyManager.CleanUp(System.Object)">
            <summary>
            This method cleans up all independent (!<see cref="T:System.WeakReference"/>.IsAlive) objects or a single object.
            </summary>
            <param name="objToRemove">
            If defined, the associated object dependency will be removed instead of a full CleanUp
            </param>
        </member>
        <member name="T:XAMLMarkupExtensions.Base.ParentChangedNotifier">
            <summary>
            A class that helps listening to changes on the Parent property of FrameworkElement objects.
            </summary>
        </member>
        <member name="F:XAMLMarkupExtensions.Base.ParentChangedNotifier.ParentProperty">
            <summary>
            An attached property that will take over control of change notification.
            </summary>
        </member>
        <member name="M:XAMLMarkupExtensions.Base.ParentChangedNotifier.GetParent(System.Windows.FrameworkElement)">
            <summary>
            Get method for the attached property.
            </summary>
            <param name="element">The target FrameworkElement object.</param>
            <returns>The target's parent FrameworkElement object.</returns>
        </member>
        <member name="M:XAMLMarkupExtensions.Base.ParentChangedNotifier.SetParent(System.Windows.FrameworkElement,System.Windows.FrameworkElement)">
            <summary>
            Set method for the attached property.
            </summary>
            <param name="element">The target FrameworkElement object.</param>
            <param name="value">The target's parent FrameworkElement object.</param>
        </member>
        <member name="M:XAMLMarkupExtensions.Base.ParentChangedNotifier.ParentChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            The callback for changes of the attached Parent property.
            </summary>
            <param name="obj">The sender.</param>
            <param name="args">The argument.</param>
        </member>
        <member name="F:XAMLMarkupExtensions.Base.ParentChangedNotifier.OnParentChangedList">
            <summary>
            A static list of actions that should be performed on parent change events.
            <para>- Entries are added by each call of the constructor.</para>
            <para>- All elements are called by the parent changed callback with the particular sender as the key.</para>
            </summary>
        </member>
        <member name="F:XAMLMarkupExtensions.Base.ParentChangedNotifier.element">
            <summary>
            The element this notifier is bound to. Needed to release the binding and Action entry.
            </summary>
        </member>
        <member name="M:XAMLMarkupExtensions.Base.ParentChangedNotifier.#ctor(System.Windows.FrameworkElement,System.Action)">
            <summary>
            Constructor.
            </summary>
            <param name="element">The element whose Parent property should be listened to.</param>
            <param name="onParentChanged">The action that will be performed upon change events.</param>
        </member>
        <member name="M:XAMLMarkupExtensions.Base.ParentChangedNotifier.Dispose">
            <summary>
            Disposes all used resources of the instance.
            </summary>
        </member>
        <member name="T:XAMLMarkupExtensions.Base.SimpleProvideValueServiceProvider">
            <summary>
            This class implements the interfaces IServiceProvider and IProvideValueTarget for ProvideValue calls on markup extensions.
            </summary>
        </member>
        <member name="M:XAMLMarkupExtensions.Base.SimpleProvideValueServiceProvider.GetService(System.Type)">
            <summary>
            Return the requested service.
            </summary>
            <param name="service">The type of the service.</param>
            <returns>The service (this, if service ist IProvideValueTarget, otherwise null).</returns>
        </member>
        <member name="P:XAMLMarkupExtensions.Base.SimpleProvideValueServiceProvider.TargetObject">
            <summary>
            The target object.
            </summary>
        </member>
        <member name="P:XAMLMarkupExtensions.Base.SimpleProvideValueServiceProvider.TargetProperty">
            <summary>
            The target property.
            </summary>
        </member>
        <member name="P:XAMLMarkupExtensions.Base.SimpleProvideValueServiceProvider.TargetPropertyType">
            <summary>
            The target property type.
            </summary>
        </member>
        <member name="P:XAMLMarkupExtensions.Base.SimpleProvideValueServiceProvider.TargetPropertyIndex">
            <summary>
            The target property index.
            </summary>
        </member>
        <member name="P:XAMLMarkupExtensions.Base.SimpleProvideValueServiceProvider.EndPoint">
            <summary>
            An optional endpoint information.
            </summary>
        </member>
        <member name="P:XAMLMarkupExtensions.Base.SimpleProvideValueServiceProvider.ServiceProvider">
            <summary>
            An optional IServiceProvider information.
            </summary>
        </member>
        <member name="M:XAMLMarkupExtensions.Base.SimpleProvideValueServiceProvider.#ctor(System.Object,System.Object,System.Type,System.Int32,XAMLMarkupExtensions.Base.TargetInfo,System.IServiceProvider)">
            <summary>
            Create a new instance of a SimpleProvideValueServiceProvider.
            </summary>
            <param name="targetObject">The target object.</param>
            <param name="targetProperty">The target property.</param>
            <param name="targetPropertyType">The target property type.</param>
            <param name="targetPropertyIndex">The target property index.</param>
            <param name="endPoint">An optional endpoint information.</param>
            <param name="serviceProvider">An optional endpoint information.</param>
        </member>
        <member name="M:XAMLMarkupExtensions.Base.SimpleProvideValueServiceProvider.#ctor(XAMLMarkupExtensions.Base.TargetInfo,XAMLMarkupExtensions.Base.TargetInfo,System.IServiceProvider)">
            <summary>
            Create a new instance of a SimpleProvideValueServiceProvider.
            </summary>
            <param name="info">Information about the target.</param>
            <param name="endPoint">An optional endpoint information.</param>
            <param name="serviceProvider">An optional endpoint information.</param>
        </member>
        <member name="T:XAMLMarkupExtensions.Base.StaticExtension">
            <summary>
            A static extension.
            <para>Adopted from the work of Henrik Jonsson: http://www.codeproject.com/Articles/305932/Static-and-Type-markup-extensions-for-Silverlight, Licensed under Code Project Open License (CPOL).</para>
            </summary>
        </member>
        <member name="E:XAMLMarkupExtensions.Base.StaticExtension.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:XAMLMarkupExtensions.Base.StaticExtension.RaisePropertyChanged(System.String)">
            <summary>
            Raises a new <see cref="E:INotifyPropertyChanged.PropertyChanged"/> event.
            </summary>
            <param name="propertyName">The name of the property that changed.</param>
        </member>
        <member name="P:XAMLMarkupExtensions.Base.StaticExtension.MemberType">
            <summary>
            The member type.
            </summary>
        </member>
        <member name="P:XAMLMarkupExtensions.Base.StaticExtension.Member">
            <summary>
            The member.
            </summary>
        </member>
        <member name="P:XAMLMarkupExtensions.Base.StaticExtension.Result">
            <summary>
            The result.
            </summary>
        </member>
        <member name="M:XAMLMarkupExtensions.Base.StaticExtension.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:XAMLMarkupExtensions.Base.StaticExtension.#ctor(System.String)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="member">The member name.</param>
        </member>
        <member name="M:XAMLMarkupExtensions.Base.StaticExtension.FormatOutput(XAMLMarkupExtensions.Base.TargetInfo,XAMLMarkupExtensions.Base.TargetInfo)">
            <inheritdoc/>
        </member>
        <member name="M:XAMLMarkupExtensions.Base.StaticExtension.UpdateOnEndpoint(XAMLMarkupExtensions.Base.TargetInfo)">
            <inheritdoc/>
        </member>
        <member name="M:XAMLMarkupExtensions.Base.StaticExtension.OnServiceProviderChanged(System.IServiceProvider)">
            <inheritdoc/>
        </member>
        <member name="T:XAMLMarkupExtensions.Base.TargetInfo">
            <summary>
            This class stores information about a markup extension target.
            </summary>
        </member>
        <member name="P:XAMLMarkupExtensions.Base.TargetInfo.TargetObject">
            <summary>
            Gets the target object.
            </summary>
        </member>
        <member name="P:XAMLMarkupExtensions.Base.TargetInfo.TargetProperty">
            <summary>
            Gets the target property.
            </summary>
        </member>
        <member name="P:XAMLMarkupExtensions.Base.TargetInfo.TargetPropertyType">
            <summary>
            Gets the target property type.
            </summary>
        </member>
        <member name="P:XAMLMarkupExtensions.Base.TargetInfo.TargetPropertyIndex">
            <summary>
            Gets the target property index.
            </summary>
        </member>
        <member name="P:XAMLMarkupExtensions.Base.TargetInfo.IsDependencyObject">
            <summary>
            True, if the target object is a DependencyObject.
            </summary>
        </member>
        <member name="P:XAMLMarkupExtensions.Base.TargetInfo.IsEndpoint">
            <summary>
            True, if the target object is an endpoint (not another nested markup extension).
            </summary>
        </member>
        <member name="M:XAMLMarkupExtensions.Base.TargetInfo.Equals(System.Object)">
            <summary>
            Determines, whether both objects are equal.
            </summary>
            <param name="obj">An object of type TargetInfo.</param>
            <returns>True, if both are equal.</returns>
        </member>
        <member name="M:XAMLMarkupExtensions.Base.TargetInfo.GetHashCode">
            <summary>
            Serves as a hash function.
            </summary>
            <returns>The hash value.</returns>
        </member>
        <member name="M:XAMLMarkupExtensions.Base.TargetInfo.#ctor(System.Object,System.Object,System.Type,System.Int32)">
            <summary>
            Creates a new TargetInfo instance.
            </summary>
            <param name="targetObject">The target object.</param>
            <param name="targetProperty">The target property.</param>
            <param name="targetPropertyType">The target property type.</param>
            <param name="targetPropertyIndex">The target property index.</param>
        </member>
        <member name="T:XAMLMarkupExtensions.Base.TargetObjectsList">
            <summary>
            Defines a collection of assigned dependency objects.
            Instead of a single reference, a list is used, if this extension is applied to multiple instances.
            </summary>
        </member>
        <member name="F:XAMLMarkupExtensions.Base.TargetObjectsList.targetObjects">
            <summary>
            Holds the collection of assigned dependency objects as WeakReferences and its property metadata.
            </summary>
        </member>
        <member name="F:XAMLMarkupExtensions.Base.TargetObjectsList.hashCodeTargetObjects">
            <summary>
            Holds hash codes of each target in <see cref="F:XAMLMarkupExtensions.Base.TargetObjectsList.targetObjects" />.
            Allows fast find key in <see cref="F:XAMLMarkupExtensions.Base.TargetObjectsList.targetObjects" /> by object.
            <see cref="T:System.Collections.Generic.List`1" /> is necessary, because different objects can has same hashcode.
            </summary>
        </member>
        <member name="F:XAMLMarkupExtensions.Base.TargetObjectsList.nestedTargetObjects">
            <summary>
            Holds the collection of assigned dependency objects which implements <see cref="T:XAMLMarkupExtensions.Base.INestedMarkupExtension" />.
            This collection is subset of <see cref="F:XAMLMarkupExtensions.Base.TargetObjectsList.targetObjects" />.
            </summary>
        </member>
        <member name="F:XAMLMarkupExtensions.Base.TargetObjectsList.deadTargets">
            <summary>
            Holds the collection of weak references, which target already collected by GC.
            This references should be removed from other collections.
            </summary>
        </member>
        <member name="P:XAMLMarkupExtensions.Base.TargetObjectsList.Count">
            <summary>
            Gets the count of assigned dependency objects.
            </summary>
        </member>
        <member name="M:XAMLMarkupExtensions.Base.TargetObjectsList.AddTargetObject(System.Object)">
            <summary>
            Add new target to internal list.
            </summary>
            <param name="targetObject">the new target.</param>
            <returns>Weak reference of target object.</returns>
        </member>
        <member name="M:XAMLMarkupExtensions.Base.TargetObjectsList.AddTargetObjectProperty(System.WeakReference,System.Object,System.Type,System.Int32)">
            <summary>
            Add property info of target object.
            </summary>
            <param name="targetObjectWeakReference">The weak reference of target object.</param>
            <param name="targetProperty">The target property.</param>
            <param name="targetPropertyType">The type of target property.</param>
            <param name="targetPropertyIndex">The index of target property.</param>
        </member>
        <member name="M:XAMLMarkupExtensions.Base.TargetObjectsList.IsConnected(XAMLMarkupExtensions.Base.TargetInfo)">
            <summary>
            Check if target object and its property contains in list.
            </summary>
            <param name="info">Information about the target.</param>
            <returns><see langwrod="true" /> if it is contains.</returns>
        </member>
        <member name="M:XAMLMarkupExtensions.Base.TargetObjectsList.TryFindKey(System.Object)">
            <summary>
            Try find weak reference key of target object in list.
            </summary>
            <param name="targetObject">The searching target object.</param>
            <returns>
            <see cref="T:System.WeakReference" /> of target object if it contains in list.
            <see langword="null" /> otherwise.
            </returns>
        </member>
        <member name="M:XAMLMarkupExtensions.Base.TargetObjectsList.GetTargetInfos">
            <summary>
            Get information of all target objects.
            </summary>
        </member>
        <member name="M:XAMLMarkupExtensions.Base.TargetObjectsList.GetNestedTargetInfos">
            <summary>
            Get information of all targets objects which implements <see cref="T:XAMLMarkupExtensions.Base.INestedMarkupExtension" />.
            </summary>
        </member>
        <member name="M:XAMLMarkupExtensions.Base.TargetObjectsList.ClearDeadReferences">
            <summary>
            Clear all references to dead targets.
            </summary>
        </member>
        <member name="M:XAMLMarkupExtensions.Base.TargetObjectsList.ClearReferences(System.Collections.Generic.IEnumerable{System.WeakReference})">
            <summary>
            Clear specified references.
            </summary>
        </member>
        <member name="M:XAMLMarkupExtensions.Base.TargetObjectsList.Clear">
            <summary>
            Clear all targets.
            </summary>
        </member>
        <member name="T:XAMLMarkupExtensions.Base.TargetObjectsList.TargetObjectValue">
            <summary>
            Information about target object.
            </summary>
        </member>
        <member name="M:XAMLMarkupExtensions.Base.TargetObjectsList.TargetObjectValue.#ctor(System.Int32)">
            <summary>
            Create new <see cref="T:XAMLMarkupExtensions.Base.TargetObjectsList.TargetObjectValue" /> instance.
            </summary>
            <param name="targetObjectHashCode">The hashcode of target object.</param>
        </member>
        <member name="P:XAMLMarkupExtensions.Base.TargetObjectsList.TargetObjectValue.TargetObjectHashCode">
            <summary>
            Hashcode of target object.
            </summary>
        </member>
        <member name="P:XAMLMarkupExtensions.Base.TargetObjectsList.TargetObjectValue.TargetProperties">
            <summary>
            Information about properties of target object.
            </summary>
        </member>
        <member name="T:XAMLMarkupExtensions.Base.TargetPath">
            <summary>
            This class helps tracking the path to a specific endpoint.
            </summary>
        </member>
        <member name="P:XAMLMarkupExtensions.Base.TargetPath.Path">
            <summary>
            The path to the endpoint.
            </summary>
        </member>
        <member name="P:XAMLMarkupExtensions.Base.TargetPath.EndPoint">
            <summary>
            Gets the endpoint.
            </summary>
        </member>
        <member name="M:XAMLMarkupExtensions.Base.TargetPath.AddStep(XAMLMarkupExtensions.Base.TargetInfo)">
            <summary>
            Add another step to the path.
            </summary>
            <param name="info">The TargetInfo object of the step.</param>
        </member>
        <member name="M:XAMLMarkupExtensions.Base.TargetPath.GetNextStep">
            <summary>
            Get the next step and remove it from the path.
            </summary>
            <returns>The next steps TargetInfo.</returns>
        </member>
        <member name="M:XAMLMarkupExtensions.Base.TargetPath.ShowNextStep">
            <summary>
            Get the next step.
            </summary>
            <returns>The next steps TargetInfo.</returns>
        </member>
        <member name="M:XAMLMarkupExtensions.Base.TargetPath.#ctor(XAMLMarkupExtensions.Base.TargetInfo)">
            <summary>
            Creates a new TargetPath instance.
            </summary>
            <param name="endPoint">The endpoints TargetInfo of the path.</param>
        </member>
        <member name="T:XAMLMarkupExtensions.Base.TargetPropertyInfo">
            <summary>
            Defines information about target object property.
            </summary>
        </member>
        <member name="P:XAMLMarkupExtensions.Base.TargetPropertyInfo.TargetProperty">
            <summary>
            Gets the target property.
            </summary>
        </member>
        <member name="P:XAMLMarkupExtensions.Base.TargetPropertyInfo.TargetPropertyType">
            <summary>
            Gets the target property type.
            </summary>
        </member>
        <member name="P:XAMLMarkupExtensions.Base.TargetPropertyInfo.TargetPropertyIndex">
            <summary>
            Gets the target property index.
            </summary>
        </member>
        <member name="M:XAMLMarkupExtensions.Base.TargetPropertyInfo.#ctor(System.Object,System.Type,System.Int32)">
            <summary>
            Create new <see cref="T:XAMLMarkupExtensions.Base.TargetPropertyInfo" /> instance.
            </summary>
            <param name="targetProperty">The target property.</param>
            <param name="targetPropertyType">The type of property.</param>
            <param name="targetPropertyIndex">The target property index</param>
        </member>
        <member name="M:XAMLMarkupExtensions.Base.TargetPropertyInfo.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:XAMLMarkupExtensions.Base.TargetPropertyInfo.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:XAMLMarkupExtensions.Base.TargetPropertyInfo.Equals(XAMLMarkupExtensions.Base.TargetPropertyInfo)">
            <summary>
            Compare to another object.
            </summary>
            <param name="other">Other object for comparing.</param>
            <returns>
            <see langwrod="true" /> if objects are equal, <see langword="false" /> otherwise.
            </returns>
        </member>
        <member name="T:XAMLMarkupExtensions.Base.TypeExtension">
            <summary>
            A type extension.
            <para>Adopted from the work of Henrik Jonsson: http://www.codeproject.com/Articles/305932/Static-and-Type-markup-extensions-for-Silverlight, Licensed under Code Project Open License (CPOL).</para>
            </summary>
        </member>
        <member name="E:XAMLMarkupExtensions.Base.TypeExtension.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:XAMLMarkupExtensions.Base.TypeExtension.RaisePropertyChanged(System.String)">
            <summary>
            Raises a new <see cref="E:INotifyPropertyChanged.PropertyChanged"/> event.
            </summary>
            <param name="propertyName">The name of the property that changed.</param>
        </member>
        <member name="P:XAMLMarkupExtensions.Base.TypeExtension.Type">
            <summary>
            The resolved type.
            </summary>
        </member>
        <member name="P:XAMLMarkupExtensions.Base.TypeExtension.TypeName">
            <summary>
            The type name.
            </summary>
        </member>
        <member name="M:XAMLMarkupExtensions.Base.TypeExtension.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:XAMLMarkupExtensions.Base.TypeExtension.#ctor(System.String)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="type">The name of the type.</param>
        </member>
        <member name="M:XAMLMarkupExtensions.Base.TypeExtension.OnServiceProviderChanged(System.IServiceProvider)">
            <summary>
            Override this function, if (and only if) additional information is needed from the <see cref="T:System.IServiceProvider"/> instance that is passed to <see cref="M:XAMLMarkupExtensions.Base.NestedMarkupExtension.ProvideValue(System.IServiceProvider)"/>.
            </summary>
            <param name="serviceProvider">A service provider.</param>
        </member>
        <member name="M:XAMLMarkupExtensions.Base.TypeExtension.FormatOutput(XAMLMarkupExtensions.Base.TargetInfo,XAMLMarkupExtensions.Base.TargetInfo)">
            <inheritdoc/>
        </member>
        <member name="M:XAMLMarkupExtensions.Base.TypeExtension.UpdateOnEndpoint(XAMLMarkupExtensions.Base.TargetInfo)">
            <inheritdoc/>
        </member>
        <member name="T:XAMLMarkupExtensions.Binding.BindingProxy">
            <summary>
            A binding proxy class that accepts bindings and forwards them to a normal property.
            Based on: <see href="http://www.codeproject.com/Articles/71348/Binding-on-a-Property-which-is-not-a-DependencyPro"/> and
            </summary>
        </member>
        <member name="F:XAMLMarkupExtensions.Binding.BindingProxy.SourceProperty">
            <summary>
            The source dependency property.
            </summary>
        </member>
        <member name="P:XAMLMarkupExtensions.Binding.BindingProxy.Source">
            <summary>
            Gets or sets the binding source.
            </summary>
        </member>
        <member name="P:XAMLMarkupExtensions.Binding.BindingProxy.Target">
            <summary>
            Gets or sets the target.
            </summary>
        </member>
        <member name="M:XAMLMarkupExtensions.Binding.BindingProxy.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Gets called, when a property changed.
            </summary>
            <param name="e">The event arguments.</param>
        </member>
        <member name="P:XAMLMarkupExtensions.Binding.BindingProxy.TargetValue">
            <summary>
            Gets the target value.
            </summary>
        </member>
        <member name="T:XAMLMarkupExtensions.Binding.DynBindingExtension">
            <summary>
            A dynamic binding extension.
            </summary>
        </member>
        <member name="E:XAMLMarkupExtensions.Binding.DynBindingExtension.PropertyChanged">
            <summary>
            Informiert über sich ändernde Eigenschaften.
            </summary>
        </member>
        <member name="M:XAMLMarkupExtensions.Binding.DynBindingExtension.OnNotifyPropertyChanged(System.String)">
            <summary>
            Notify that a property has changed
            </summary>
            <param name="property">
            The property that changed
            </param>
        </member>
        <member name="P:XAMLMarkupExtensions.Binding.DynBindingExtension.Source">
            <summary>
            Gets or sets the source.
            </summary>
        </member>
        <member name="P:XAMLMarkupExtensions.Binding.DynBindingExtension.Path">
            <summary>
            Gets or sets the path.
            </summary>
        </member>
        <member name="P:XAMLMarkupExtensions.Binding.DynBindingExtension.Converter">
            <summary>
            Gets or sets the converter.
            </summary>
        </member>
        <member name="P:XAMLMarkupExtensions.Binding.DynBindingExtension.ConverterParameter">
            <summary>
            Gets or sets the converter parameter.
            </summary>
        </member>
        <member name="M:XAMLMarkupExtensions.Binding.DynBindingExtension.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="M:XAMLMarkupExtensions.Binding.DynBindingExtension.#ctor(System.String)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="path">The binding path.</param>
        </member>
        <member name="M:XAMLMarkupExtensions.Binding.DynBindingExtension.FormatOutput(XAMLMarkupExtensions.Base.TargetInfo,XAMLMarkupExtensions.Base.TargetInfo)">
            <inheritdoc/>
        </member>
        <member name="M:XAMLMarkupExtensions.Binding.DynBindingExtension.UpdateOnEndpoint(XAMLMarkupExtensions.Base.TargetInfo)">
            <inheritdoc/>
        </member>
        <member name="T:XAMLMarkupExtensions.Design.AlternatingGridColorExtension">
            <summary>
            A design extension with alternating grid colors.
            </summary>
        </member>
        <member name="P:XAMLMarkupExtensions.Design.AlternatingGridColorExtension.ColorEven">
            <summary>
            Gets or sets the color for even rows.
            </summary>
        </member>
        <member name="P:XAMLMarkupExtensions.Design.AlternatingGridColorExtension.ColorOdd">
            <summary>
            Gets or sets the color for odd rows.
            </summary>
        </member>
        <member name="M:XAMLMarkupExtensions.Design.AlternatingGridColorExtension.FormatOutput(XAMLMarkupExtensions.Base.TargetInfo,XAMLMarkupExtensions.Base.TargetInfo)">
            <inheritdoc/>
        </member>
        <member name="M:XAMLMarkupExtensions.Design.AlternatingGridColorExtension.UpdateOnEndpoint(XAMLMarkupExtensions.Base.TargetInfo)">
            <inheritdoc/>
        </member>
        <member name="M:XAMLMarkupExtensions.Design.AlternatingGridColorExtension.#ctor">
            <summary>
            Creates a new instance.
            </summary>
        </member>
        <member name="T:XAMLMarkupExtensions.Strings.CatExtension">
            <summary>
            A string concatenation extension.
            </summary>
        </member>
        <member name="P:XAMLMarkupExtensions.Strings.CatExtension.Items">
            <summary>
            Gets the list of items.
            </summary>
        </member>
        <member name="P:XAMLMarkupExtensions.Strings.CatExtension.Format">
            <summary>
            Gets or sets the format string.
            </summary>
        </member>
        <member name="M:XAMLMarkupExtensions.Strings.CatExtension.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:XAMLMarkupExtensions.Strings.CatExtension.OnServiceProviderChanged(System.IServiceProvider)">
            <inheritdoc/>
        </member>
        <member name="M:XAMLMarkupExtensions.Strings.CatExtension.FormatOutput(XAMLMarkupExtensions.Base.TargetInfo,XAMLMarkupExtensions.Base.TargetInfo)">
            <inheritdoc/>
        </member>
        <member name="M:XAMLMarkupExtensions.Strings.CatExtension.UpdateOnEndpoint(XAMLMarkupExtensions.Base.TargetInfo)">
            <inheritdoc/>
        </member>
    </members>
</doc>
